#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —É–≥–æ–ª—å–Ω—ã—Ö –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–µ—Ä—Å–∏—é.
"""

import sys
import os
import platform
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    deps_status = {}
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    required = ['tkinter']
    for dep in required:
        try:
            __import__(dep)
            deps_status[dep] = True
        except ImportError:
            deps_status[dep] = False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    optional = ['numpy', 'pandas', 'scipy', 'matplotlib', 'plotly', 'vtk', 'rasterio', 'ezdxf']
    for dep in optional:
        try:
            __import__(dep)
            deps_status[dep] = True
        except ImportError:
            deps_status[dep] = False
    
    return deps_status

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("=" * 60)
    print("üéØ COAL DEPOSIT INTERPOLATION TOOL v1.0.0-rc1")
    print("=" * 60)
    print("üêç –ü—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —É–≥–æ–ª—å–Ω—ã—Ö –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π")
    print("‚ú® Professional geological data analysis")
    print("=" * 60)

def print_system_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ."""
    print("\nüîç –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   Python: {sys.version.split()[0]}")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}")
    print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

def analyze_project_readiness(deps):
    """–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìä –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GUI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    if deps['tkinter']:
        print("   ‚úÖ GUI –≥–æ—Ç–æ–≤ (Tkinter)")
    else:
        print("   ‚ùå GUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Tkinter –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    core_libs = ['numpy', 'pandas', 'scipy']
    core_ready = all(deps.get(lib, False) for lib in core_libs)
    
    if core_ready:
        print("   ‚úÖ –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (NumPy, Pandas, SciPy)")
    else:
        print("   ‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    viz_libs = ['matplotlib', 'plotly', 'vtk']
    viz_ready = any(deps.get(lib, False) for lib in viz_libs)
    
    if viz_ready:
        available_viz = [lib for lib in viz_libs if deps.get(lib, False)]
        print(f"   ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ({', '.join(available_viz)})")
    else:
        print("   ‚ö†Ô∏è  –ë–∞–∑–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (fallback)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_libs = ['rasterio', 'ezdxf']
    export_ready = any(deps.get(lib, False) for lib in export_libs)
    
    if export_ready:
        available_export = [lib for lib in export_libs if deps.get(lib, False)]
        print(f"   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç ({', '.join(available_export)})")
    else:
        print("   ‚ö†Ô∏è  –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç (CSV)")
    
    return True

def recommend_launch_mode(deps):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞."""
    print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:")
    
    core_libs = ['numpy', 'pandas', 'scipy', 'matplotlib']
    full_mode_ready = all(deps.get(lib, False) for lib in core_libs)
    
    if full_mode_ready:
        print("   üéØ –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú - –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   ‚Ü≥ –ö–æ–º–∞–Ω–¥–∞: python main.py")
        return "full"
    else:
        print("   üéÆ –î–ï–ú–û –†–ï–ñ–ò–ú - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("   ‚Ü≥ –ö–æ–º–∞–Ω–¥–∞: python demo.py")
        return "demo"

def launch_application(mode, deps):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    current_dir = Path(__file__).parent
    
    print(f"\nüé¨ –ó–ê–ü–£–°–ö –í {mode.upper()} –†–ï–ñ–ò–ú–ï...")
    
    if mode == "full":
        main_path = current_dir / "main.py"
        if main_path.exists():
            print("   üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            try:
                sys.path.insert(0, str(current_dir))
                
                # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                from src.gui.main_window import main as main_app
                print("   ‚úÖ GUI –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
                print("   üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                
                main_app()
                
            except ImportError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI: {e}")
                print("   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º...")
                launch_application("demo", deps)
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                return False
        else:
            print("   ‚ùå main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º...")
            launch_application("demo", deps)
    
    elif mode == "demo":
        demo_path = current_dir / "demo.py"
        if demo_path.exists():
            print("   üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            try:
                sys.path.insert(0, str(current_dir))
                
                # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –¥–µ–º–æ
                import demo
                print("   ‚úÖ –î–µ–º–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
                print("   üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
                
                demo.main()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ: {e}")
                return False
        else:
            print("   ‚ùå demo.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    return True

def print_installation_guide(deps):
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    missing_core = []
    missing_optional = []
    
    core_libs = ['numpy', 'pandas', 'scipy', 'matplotlib']
    optional_libs = ['plotly', 'vtk', 'rasterio', 'ezdxf']
    
    for lib in core_libs:
        if not deps.get(lib, False):
            missing_core.append(lib)
    
    for lib in optional_libs:
        if not deps.get(lib, False):
            missing_optional.append(lib)
    
    if missing_core or missing_optional:
        print("\nüì¶ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–°–¢–ê–ù–û–í–ö–ï:")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        
        if missing_core:
            print(f"   üîß –û—Å–Ω–æ–≤–Ω—ã–µ: pip install {' '.join(missing_core)}")
        
        if missing_optional:
            print(f"   ‚≠ê –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ: pip install {' '.join(missing_optional)}")
        
        print("\n   üìã –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ requirements.txt:")
        print("   pip install -r requirements.txt")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞."""
    try:
        print_banner()
        print_system_info()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps = check_dependencies()
        
        # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        gui_ready = analyze_project_readiness(deps)
        
        if not gui_ready:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
            print("   Tkinter –Ω–µ –Ω–∞–π–¥–µ–Ω - GUI –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            print("   –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Tkinter")
            return False
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
        mode = recommend_launch_mode(deps)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        print_installation_guide(deps)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        success = launch_application(mode, deps)
        
        if success:
            print("\n‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
            return False
        
        return True
        
    except KeyboardInterrupt:
        print("\n\nüõë –ü–†–ï–†–´–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)