name: Coal Interpolation Tool CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libxext6 libsm6 libxrender1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-optional-dependencies:
    runs-on: ubuntu-latest
    name: Test with optional dependencies
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies for optional packages
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx libglib2.0-0 libxext6 libsm6 libxrender1 \
          libgdal-dev gdal-bin
    
    - name: Install all dependencies including optional
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Install optional dependencies
        pip install rasterio>=1.3.0 vtk>=9.2.0 ezdxf>=1.0.0
    
    - name: Run tests with all dependencies
      run: |
        pytest tests/ -v -m "not slow" --cov=src --cov-report=xml
    
    - name: Test export examples
      run: |
        cd examples
        python export_examples.py

  package-test:
    runs-on: ubuntu-latest
    name: Test package installation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install .
    
    - name: Test basic import
      run: |
        python -c "
        import src.core.interpolation.idw as idw
        import src.io.readers.csv_reader as csv
        import src.gui.main_window as gui
        print('✅ All core modules import successfully')
        "

  docs-check:
    runs-on: ubuntu-latest
    name: Documentation check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation files
      run: |
        # Check that all required documentation exists
        required_docs=(
          "README.md"
          "CHANGELOG.md" 
          "INSTALL.md"
          "ARCHITECTURE.md"
          "TODO.md"
          "GITHUB_SETUP.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Missing required documentation: $doc"
            exit 1
          else
            echo "✅ Found: $doc"
          fi
        done
        
        echo "✅ All required documentation files present"
    
    - name: Check for placeholder URLs
      run: |
        # Check for placeholder GitHub URLs that need to be updated
        if grep -r "your-organization" *.md; then
          echo "⚠️  Found placeholder URLs that should be updated"
        else
          echo "✅ No placeholder URLs found"
        fi